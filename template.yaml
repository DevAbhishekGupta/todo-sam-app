AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless To-Do App using AWS SAM

Globals:
  Function:
    Timeout: 10
    Runtime: nodejs22.x
    MemorySize: 128
    CodeUri: src/
    Environment:
      Variables:
        STAGE: !Ref StageName
        TABLE_NAME: ToDoTasks
    LoggingConfig:
      LogFormat: JSON
    Tags:
      - Key: Project
        Value: ToDoApp
      - Key: Owner
        Value: Abhishek
      - Key: Environment
        Value: !Ref StageName

  Api:
    Cors:
      AllowMethods: "'OPTIONS','GET','POST','PUT','DELETE','PATCH'"
      AllowHeaders: "'Content-Type','Authorization'"
      AllowOrigin: "'*'"

Parameters:
  StageName:
    Type: String
    Default: dev
    Description: Deployment stage (e.g., dev, prod)

Resources:

  ToDoHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub "ToDoHttpApi-${StageName}"
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}"
              audience:
                - !Ref UserPoolClient

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: ToDoUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ClientName: ToDoAppClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  AuthSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/signup.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:RespondToAuthChallenge
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        SignupAPI:
          Type: HttpApi
          Properties:
            Path: /auth/signup
            Method: post
            ApiId: !Ref ToDoHttpApi

  AuthLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/login.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:RespondToAuthChallenge
                - cognito-idp:GlobalSignOut
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        LoginAPI:
          Type: HttpApi
          Properties:
            Path: /auth/login
            Method: post
            ApiId: !Ref ToDoHttpApi
  
  AuthConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/confirmSignup.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      CodeUri: src/
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmSignUp
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        ConfirmAPI:
          Type: HttpApi
          Properties:
            Path: /auth/confirm
            Method: post
            ApiId: !Ref ToDoHttpApi

  AuthForgotPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/forgotPassword.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      CodeUri: src/
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          STAGE: !Ref StageName
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ForgotPassword
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        ForgotPasswordAPI:
          Type: HttpApi
          Properties:
            Path: /auth/forgot
            Method: post
            ApiId: !Ref ToDoHttpApi

  AuthResetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/resetPassword.handler
      Runtime: nodejs22.x
      MemorySize: 128
      Timeout: 10
      CodeUri: src/
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Environment:
        Variables:
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          STAGE: !Ref StageName
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:ConfirmForgotPassword
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        ResetPasswordAPI:
          Type: HttpApi
          Properties:
            Path: /auth/reset
            Method: post
            ApiId: !Ref ToDoHttpApi

  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/createTask.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: ToDoTasks
      Events:
        CreateTaskAPI:
          Type: HttpApi
          Properties:
            Path: /tasks
            Method: post
            ApiId: !Ref ToDoHttpApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/getTasks.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: ToDoTasks
      Events:
        GetTasksAPI:
          Type: HttpApi
          Properties:
            Path: /tasks
            Method: get
            ApiId: !Ref ToDoHttpApi
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/updateTask.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: ToDoTasks
      Events:
        UpdateTaskAPI:
          Type: HttpApi
          Properties:
            Path: /tasks/{taskId}
            Method: put
            ApiId: !Ref ToDoHttpApi
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/deleteTask.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: ToDoTasks
      Events:
        DeleteTaskAPI:
          Type: HttpApi
          Properties:
            Path: /tasks/{taskId}
            Method: delete
            ApiId: !Ref ToDoHttpApi
            Auth:
              Authorizer: CognitoAuthorizer

  CompleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/completeTask.handler
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: ToDoTasks
      Events:
        CompleteTaskAPI:
          Type: HttpApi
          Properties:
            Path: /tasks/{taskId}/toggle
            Method: patch
            ApiId: !Ref ToDoHttpApi
            Auth:
              Authorizer: CognitoAuthorizer

  ToDoTasksTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: ToDoTasks
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: taskId
          KeyType: RANGE
      Tags:
        - Key: Project
          Value: ToDoApp
        - Key: Owner
          Value: Abhishek
        - Key: Environment
          Value: !Ref StageName

Outputs:

  WebEndpoint:
    Description: "HTTP API endpoint URL"
    Value: !Sub "https://${ToDoHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-WebEndpoint"

  TasksTableName:
    Description: "DynamoDB Table Name"
    Value: ToDoTasks
    Export:
      Name: !Sub "${AWS::StackName}-TasksTableName"

  StageOutput:
    Description: "Deployment Stage"
    Value: !Ref StageName
    Export:
      Name: !Sub "${AWS::StackName}-Stage"

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"
