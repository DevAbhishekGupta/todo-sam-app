AWSTemplateFormatVersion: 2010-09-09
Description: ToDoSamApp

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  StageName:
    Type: String
    Default: Dev
    Description: Deployment stage name (e.g., Dev, Test, Prod)

Metadata:
  AWS::ServerlessRepo::Application:
    Name: ToDoSamApp
    Description: Serverless To-Do app with Cognito authentication and DynamoDB backend

Globals:
  Api:
    Cors:
      AllowMethods: "'OPTIONS','GET','POST','PUT','DELETE','PATCH'"
      AllowHeaders: "'Content-Type','Authorization'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn
  Function:
    CodeUri: src/
    Timeout: 10
    Runtime: nodejs18.x
    MemorySize: 128
    Environment:
      Variables:
        TABLE_NAME: ToDoTasks
        USER_POOL_CLIENT_ID: !Ref UserPoolClient
        USER_POOL_ID: !Ref UserPool
    LoggingConfig:
      LogFormat: JSON
    Tags:
      Project: ToDoApp
      Owner: Abhishek
      Environment: !Ref StageName

Resources:

  ### üîê Auth Resources ###
  AuthSignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handle user signup via Cognito
      Handler: handlers/signup.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:ListUsers
                - cognito-idp:ForgotPassword
                - cognito-idp:ConfirmForgotPassword
                - cognito-idp:RespondToAuthChallenge
                - cognito-idp:InitiateAuth
                - cognito-idp:RevokeToken
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        SignupAPI:
          Type: Api
          Properties:
            Path: /auth/signup
            Method: post
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: NONE

  AuthLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Handle user login via Cognito
      Handler: handlers/login.handler
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:ListUsers
                - cognito-idp:ForgotPassword
                - cognito-idp:ConfirmForgotPassword
                - cognito-idp:RespondToAuthChallenge
                - cognito-idp:GlobalSignOut
                - cognito-idp:InitiateAuth
                - cognito-idp:RevokeToken
              Resource: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}"
      Events:
        LoginAPI:
          Type: Api
          Properties:
            Path: /auth/login
            Method: post
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: NONE

  UserPool:
    Type: AWS::Cognito::UserPool
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      UserPoolName: ToDoUserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      ClientName: ToDoAppClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
        - USER_PASSWORD_AUTH

  ### üìã Task Resources ###
  CreateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Create a new task
      Handler: handlers/createTask.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTasksTable
      Events:
        CreateTaskAPI:
          Type: Api
          Properties:
            Path: /tasks
            Method: post
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: CognitoAuthorizer

  GetTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Get all tasks for the user
      Handler: handlers/getTasks.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTasksTable
      Events:
        GetTasksAPI:
          Type: Api
          Properties:
            Path: /tasks
            Method: get
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: CognitoAuthorizer

  DeleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Delete a task by ID
      Handler: handlers/deleteTask.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTasksTable
      Events:
        DeleteTaskAPI:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: delete
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: CognitoAuthorizer

  UpdateTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Update a task by ID
      Handler: handlers/updateTask.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTasksTable
      Events:
        UpdateTaskAPI:
          Type: Api
          Properties:
            Path: /tasks/{taskId}
            Method: put
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: CognitoAuthorizer

  CompleteTaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      Description: Toggle task completion status
      Handler: handlers/completeTask.handler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ToDoTasksTable
      Events:
        CompleteTaskAPI:
          Type: Api
          Properties:
            Path: /tasks/{taskId}/toggle
            Method: patch
            RestApiId: !Ref ServerlessRestApi
            Auth:
              Authorizer: CognitoAuthorizer

  ToDoTasksTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      TableName: ToDoTasks
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: taskId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: taskId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: ToDoApp
        - Key: Owner
          Value: Abhishek
        - Key: Environment
          Value: !Ref StageName

  ### üåê API Gateway ###
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ToDoApi
      StageName: !Ref StageName
      Tags:
        Project: ToDoApp
        Owner: Abhishek
        Environment: !Ref StageName

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"
  ToDoTasksTableName:
    Description: DynamoDB table name for tasks
    Value: !Ref ToDoTasksTable
    Export:
      Name: !Sub "${AWS::StackName}-ToDoTasksTableName"
